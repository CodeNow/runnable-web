@mixin modernizr($test) {
  html.#{$test} & {
    @content;
  }
}

@mixin transition-delay($delay) {
  -webkit-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  animation: $animation;
}

@mixin user-select($user-select) {
  -moz-user-select: $user-select;
  -ms-user-select: $user-select;
  -webkit-user-select: $user-select;
  user-select: $user-select;
}

// transform3d mixin with fallback for top
@mixin transform-3d($x: 0, $y: 0, $z: 1) {
  -webkit-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);

  @include modernizr(no-csstransforms3d) {
    -ms-transform: translate($x, $y);
    -webkit-transform: translate($x, $y);
    transform: translate($x, $y);
  }

  @include modernizr(no-csstransforms) {
    top: $y;
  }
}

// scale3d mixin
@mixin scale-3d($x: 0, $y: 0, $z: 1) {
  -webkit-transform: scale3d($x, $y, $z);
  transform: scale3d($x, $y, $z);

  @include modernizr(no-csstransforms3d) {
    -ms-transform: scale($x, $y);
    -webkit-transform: scale($x, $y);
    transform: scale($x, $y);
  }

  @include modernizr(no-csstransforms) {
    height: $y;
    width: $x;
  }
}

// rotate3d mixin
@mixin rotate-3d($a: 0deg) {
  -webkit-transform: rotate3d(0,0,1,$a);
  transform: rotate($a);
  // ff doesn't rotate in the correct direction
  // unless -webkit-, using 2d transforms for now
  // https://bugzilla.mozilla.org/show_bug.cgi?id=769892
  // the bug in action: http://jsbin.com/AnaFICAY/2/edit

  @include modernizr(no-csstransforms3d) {
    -ms-transform: rotate($a);
    -webkit-transform: rotate($a);
    transform: rotate($a);
  }
}

// transform-origin mixin
@mixin transform-origin($x: 50%, $y: 50%) {
  -ms-transform-origin: $x, $y;
  -webkit-transform-origin: $x, $y;
  transform-origin: $x, $y;
}

// transition mixin for transforms
@mixin transition-transforms($transition, $transition2:false) {
 $params: $transition;
  @if $transition2 { $params: $transition, $transition2; }

  -ms-transition: -ms-transform+" "+$params;
  -webkit-transition: -webkit-transform+" "+$params;
  transition: transform+" "+$params;

}

// // transition mixin for transforms
// @mixin transition-transforms($transition) {
//   -ms-transition: -ms-transform+" "+$transition;
//   -webkit-transition: -webkit-transform+" "+$transition;
//   transition: transform+" "+$transition;
// }

// bootstrap's LESS media queries for SASS
@mixin media($point) {
  @if $point == xxs {
    @media (max-width: 400px) { @content; }
  }
  @else if $point == xs {
    @media (max-width: 768px) { @content; }
  }
  /* Small devices (tablets, 768px and up) */
  @else if $point == sm {
    @media (min-width: 768px) { @content; }
  }
  /* Medium devices (desktops, 992px and up) */
  @else if $point == md {
    @media (min-width: 992px) { @content; }
  }
  /* Large devices (large desktops, 1200px and up) */
  @else if $point == lg {
    @media (min-width: 1200px) { @content; }
  }
  /* Extra large devices (extra large dekstops, 1600px and up */
  @else if $point == xl {
    @media (min-width: 1600px) { @content; }
  }
}